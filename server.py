from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy
import os

app = Flask(__name__, static_folder='static', template_folder='templates')
CORS(app)

# ==============================
# üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ==============================
db_url = os.environ.get('DATABASE_URL')
if not db_url:
    print("‚ö†Ô∏è DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –Ω–∞ –¥–∏—Å–∫–µ (data.db)")
    db_url = 'sqlite:///data.db'

# Render —Ç—Ä–µ–±—É–µ—Ç SSL –¥–ª—è PostgreSQL
if db_url.startswith("postgres://"):
    db_url = db_url.replace("postgres://", "postgresql://")

app.config['SQLALCHEMY_DATABASE_URI'] = db_url
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# ==============================
# üìã –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
# ==============================
class UserData(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), nullable=False)
    company = db.Column(db.String(10), nullable=False)
    inventory = db.Column(db.JSON, nullable=False, default=[])
    shipments = db.Column(db.JSON, nullable=False, default=[])
    __table_args__ = (db.UniqueConstraint('username', 'company', name='uix_username_company'),)

# ==============================
# üß± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –∏ –¥–∞–Ω–Ω—ã—Ö
# ==============================
try:
    with app.app_context():
        db.create_all()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")

        existing_btt = UserData.query.filter_by(username='–õ–µ–æ–Ω–∏–¥', company='–ë–¢–¢').first()
        existing_li = UserData.query.filter_by(username='–õ–µ–æ–Ω–∏–¥', company='–õ–ò').first()

        if not existing_btt:
            print("–î–æ–±–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –ë–¢–¢...")
            db.session.add(UserData(
                username='–õ–µ–æ–Ω–∏–¥',
                company='–ë–¢–¢',
                inventory=[{'date': '2025-10-01', 'product': '–ü—Ä–æ–¥—É–∫—Ç1', 'lot': 'A1', 'quantity': 100, 'expiryDate': '2026-10-01'}],
                shipments=[{'date': '2025-10-02', 'product': '–ü—Ä–æ–¥—É–∫—Ç1', 'lot': 'A1', 'client': '–ö–ª–∏–µ–Ω—Ç1', 'quantity': 50, 'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä1'}]
            ))

        if not existing_li:
            print("–î–æ–±–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –õ–ò...")
            db.session.add(UserData(
                username='–õ–µ–æ–Ω–∏–¥',
                company='–õ–ò',
                inventory=[{'date': '2025-10-01', 'product': '–ü—Ä–æ–¥—É–∫—Ç2', 'lot': 'B1', 'quantity': 200, 'expiryDate': '2026-10-01'}],
                shipments=[{'date': '2025-10-02', 'product': '–ü—Ä–æ–¥—É–∫—Ç2', 'lot': 'B1', 'client': '–ö–ª–∏–µ–Ω—Ç2', 'quantity': 100, 'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä2'}]
            ))

        db.session.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ –±—ã–ª–æ)")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# ==============================
# üåê –ú–∞—Ä—à—Ä—É—Ç—ã API
# ==============================

@app.route('/')
def index():
    print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    return app.send_static_file('index.html')

@app.route('/api/data/<username>/<company>', methods=['GET'])
def get_data(username, company):
    print(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å GET /api/data/{username}/{company}")
    try:
        user_data = UserData.query.filter_by(username=username, company=company).first()
        if user_data:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {username}, {company}")
            return jsonify({
                'inventory': user_data.inventory or [],
                'shipments': user_data.shipments or []
            })
        print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {username}, {company}, –≤–æ–∑–≤—Ä–∞—â–∞—é –ø—É—Å—Ç–æ–π JSON")
        return jsonify({'inventory': [], 'shipments': []})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/data/<username>/<company>', methods=['POST'])
def save_data(username, company):
    print(f"üì§ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å POST /api/data/{username}/{company}")
    try:
        user_data = UserData.query.filter_by(username=username, company=company).first()
        new_data = request.get_json() or {}
        if user_data:
            user_data.inventory = new_data.get('inventory', [])
            user_data.shipments = new_data.get('shipments', [])
        else:
            user_data = UserData(username=username, company=company,
                                 inventory=new_data.get('inventory', []),
                                 shipments=new_data.get('shipments', []))
            db.session.add(user_data)
        db.session.commit()
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {username}, {company}")
        return jsonify({'status': 'success'})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/api/companies', methods=['GET'])
def get_companies():
    print("üìä –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å GET /api/companies")
    try:
        companies = db.session.query(UserData.company).distinct().all()
        result = [c[0] for c in companies]
        print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∫–æ–º–ø–∞–Ω–∏–∏: {result}")
        return jsonify(result)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π: {e}")
        return jsonify([])

# ==============================
# üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ==============================
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port)
