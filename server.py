from flask import Flask, jsonify, request, send_from_directory
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy
import os

app = Flask(__name__, static_folder='.', static_url_path='')
CORS(app)

# ==========================
# üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ==========================
db_url = os.environ.get("DATABASE_URL")

if not db_url:
    print("‚ö†Ô∏è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π SQLite")
    db_url = "sqlite:///data.db"

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –¥–ª—è PostgreSQL (Render –∏–Ω–æ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
if db_url.startswith("postgres://"):
    db_url = db_url.replace("postgres://", "postgresql://", 1)

app.config["SQLALCHEMY_DATABASE_URI"] = db_url
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

db = SQLAlchemy(app)

# ==========================
# üß± –ú–æ–¥–µ–ª—å —Ç–∞–±–ª–∏—Ü—ã
# ==========================
class UserData(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), nullable=False)
    company = db.Column(db.String(80), nullable=False)
    inventory = db.Column(db.JSON, nullable=False, default=[])
    shipments = db.Column(db.JSON, nullable=False, default=[])

    __table_args__ = (
        db.UniqueConstraint("username", "company", name="uix_username_company"),
    )

# ==========================
# üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
# ==========================
with app.app_context():
    db.create_all()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    existing_btt = UserData.query.filter_by(username="–õ–µ–æ–Ω–∏–¥", company="–ë–¢–¢").first()
    existing_li = UserData.query.filter_by(username="–õ–µ–æ–Ω–∏–¥", company="–õ–ò").first()

    # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    if not existing_btt:
        db.session.add(UserData(
            username="–õ–µ–æ–Ω–∏–¥",
            company="–ë–¢–¢",
            inventory=[{
                "date": "2025-10-01",
                "product": "–ü—Ä–æ–¥—É–∫—Ç1",
                "lot": "A1",
                "quantity": 100,
                "expiryDate": "2026-10-01"
            }],
            shipments=[{
                "date": "2025-10-02",
                "product": "–ü—Ä–æ–¥—É–∫—Ç1",
                "lot": "A1",
                "client": "–ö–ª–∏–µ–Ω—Ç1",
                "quantity": 50,
                "manager": "–ú–µ–Ω–µ–¥–∂–µ—Ä1"
            }]
        ))
        print("üü¢ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –ë–¢–¢")

    if not existing_li:
        db.session.add(UserData(
            username="–õ–µ–æ–Ω–∏–¥",
            company="–õ–ò",
            inventory=[{
                "date": "2025-10-01",
                "product": "–ü—Ä–æ–¥—É–∫—Ç2",
                "lot": "B1",
                "quantity": 200,
                "expiryDate": "2026-10-01"
            }],
            shipments=[{
                "date": "2025-10-02",
                "product": "–ü—Ä–æ–¥—É–∫—Ç2",
                "lot": "B1",
                "client": "–ö–ª–∏–µ–Ω—Ç2",
                "quantity": 100,
                "manager": "–ú–µ–Ω–µ–¥–∂–µ—Ä2"
            }]
        ))
        print("üü¢ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –õ–ò")

    db.session.commit()
    print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# ==========================
# üåê –ú–∞—Ä—à—Ä—É—Ç—ã API
# ==========================
@app.route("/")
def serve_index():
    print("üìÑ –û—Ç–ø—Ä–∞–≤–∫–∞ index.html")
    return send_from_directory(".", "index.html")

@app.route("/api/companies", methods=["GET"])
def get_companies():
    print("üìä –ó–∞–ø—Ä–æ—Å –∫–æ–º–ø–∞–Ω–∏–π")
    companies = db.session.query(UserData.company).distinct().all()
    return jsonify([c[0] for c in companies])

@app.route("/api/data/<username>/<company>", methods=["GET"])
def get_data(username, company):
    print(f"üì• –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö: {username} / {company}")
    user_data = UserData.query.filter_by(username=username, company=company).first()
    if user_data:
        return jsonify({
            "inventory": user_data.inventory,
            "shipments": user_data.shipments
        })
    return jsonify({"inventory": [], "shipments": []})

@app.route("/api/data/<username>/<company>", methods=["POST"])
def save_data(username, company):
    print(f"üì§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {username} / {company}")
    data = request.get_json()
    if not data:
        return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400

    user_data = UserData.query.filter_by(username=username, company=company).first()
    if user_data:
        user_data.inventory = data.get("inventory", [])
        user_data.shipments = data.get("shipments", [])
    else:
        user_data = UserData(
            username=username,
            company=company,
            inventory=data.get("inventory", []),
            shipments=data.get("shipments", [])
        )
        db.session.add(user_data)
    db.session.commit()
    return jsonify({"status": "success"})

# ==========================
# üèÅ –¢–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
# ==========================
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host="0.0.0.0", port=port)
